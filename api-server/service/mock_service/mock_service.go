// Code generated by MockGen. DO NOT EDIT.
// Source: api-server/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/kons16/meibun/api-server/model"
	reflect "reflect"
	time "time"
)

// MockMeibunApp is a mock of MeibunApp interface
type MockMeibunApp struct {
	ctrl     *gomock.Controller
	recorder *MockMeibunAppMockRecorder
}

// MockMeibunAppMockRecorder is the mock recorder for MockMeibunApp
type MockMeibunAppMockRecorder struct {
	mock *MockMeibunApp
}

// NewMockMeibunApp creates a new mock instance
func NewMockMeibunApp(ctrl *gomock.Controller) *MockMeibunApp {
	mock := &MockMeibunApp{ctrl: ctrl}
	mock.recorder = &MockMeibunAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeibunApp) EXPECT() *MockMeibunAppMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method
func (m *MockMeibunApp) CreateNewUser(name, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", name, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewUser indicates an expected call of CreateNewUser
func (mr *MockMeibunAppMockRecorder) CreateNewUser(name, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockMeibunApp)(nil).CreateNewUser), name, email, password)
}

// FindUserByEmail mocks base method
func (m *MockMeibunApp) FindUserByEmail(email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail
func (mr *MockMeibunAppMockRecorder) FindUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockMeibunApp)(nil).FindUserByEmail), email)
}

// CreateNewToken mocks base method
func (m *MockMeibunApp) CreateNewToken(userID uint, expiresAt time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewToken", userID, expiresAt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewToken indicates an expected call of CreateNewToken
func (mr *MockMeibunAppMockRecorder) CreateNewToken(userID, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewToken", reflect.TypeOf((*MockMeibunApp)(nil).CreateNewToken), userID, expiresAt)
}

// FindUserByToken mocks base method
func (m *MockMeibunApp) FindUserByToken(token string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByToken", token)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByToken indicates an expected call of FindUserByToken
func (mr *MockMeibunAppMockRecorder) FindUserByToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByToken", reflect.TypeOf((*MockMeibunApp)(nil).FindUserByToken), token)
}

// LoginUser mocks base method
func (m *MockMeibunApp) LoginUser(email, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", email, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser
func (mr *MockMeibunAppMockRecorder) LoginUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockMeibunApp)(nil).LoginUser), email, password)
}

// LogoutUser mocks base method
func (m *MockMeibunApp) LogoutUser(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUser indicates an expected call of LogoutUser
func (mr *MockMeibunAppMockRecorder) LogoutUser(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockMeibunApp)(nil).LogoutUser), token)
}

// CreateNewBook mocks base method
func (m *MockMeibunApp) CreateNewBook(sentence, title, author string, pages int, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewBook", sentence, title, author, pages, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewBook indicates an expected call of CreateNewBook
func (mr *MockMeibunAppMockRecorder) CreateNewBook(sentence, title, author, pages, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewBook", reflect.TypeOf((*MockMeibunApp)(nil).CreateNewBook), sentence, title, author, pages, userId)
}

// UpdateBook mocks base method
func (m *MockMeibunApp) UpdateBook(updateData *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook
func (mr *MockMeibunAppMockRecorder) UpdateBook(updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockMeibunApp)(nil).UpdateBook), updateData)
}

// DeleteBookByBookID mocks base method
func (m *MockMeibunApp) DeleteBookByBookID(bookID, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookByBookID", bookID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookByBookID indicates an expected call of DeleteBookByBookID
func (mr *MockMeibunAppMockRecorder) DeleteBookByBookID(bookID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookByBookID", reflect.TypeOf((*MockMeibunApp)(nil).DeleteBookByBookID), bookID, userID)
}

// GetAllBooksByUserID mocks base method
func (m *MockMeibunApp) GetAllBooksByUserID(userID uint) (*[]model.FrontBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooksByUserID", userID)
	ret0, _ := ret[0].(*[]model.FrontBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooksByUserID indicates an expected call of GetAllBooksByUserID
func (mr *MockMeibunAppMockRecorder) GetAllBooksByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooksByUserID", reflect.TypeOf((*MockMeibunApp)(nil).GetAllBooksByUserID), userID)
}

// MakeHart mocks base method
func (m *MockMeibunApp) MakeHart(bookID, userID uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeHart", bookID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeHart indicates an expected call of MakeHart
func (mr *MockMeibunAppMockRecorder) MakeHart(bookID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeHart", reflect.TypeOf((*MockMeibunApp)(nil).MakeHart), bookID, userID)
}

// GetMyHart mocks base method
func (m *MockMeibunApp) GetMyHart(userID uint) (*[]model.FrontBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyHart", userID)
	ret0, _ := ret[0].(*[]model.FrontBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyHart indicates an expected call of GetMyHart
func (mr *MockMeibunAppMockRecorder) GetMyHart(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyHart", reflect.TypeOf((*MockMeibunApp)(nil).GetMyHart), userID)
}

// RemoveMyHart mocks base method
func (m *MockMeibunApp) RemoveMyHart(bookID, userID uint) (*[]model.FrontBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMyHart", bookID, userID)
	ret0, _ := ret[0].(*[]model.FrontBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMyHart indicates an expected call of RemoveMyHart
func (mr *MockMeibunAppMockRecorder) RemoveMyHart(bookID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMyHart", reflect.TypeOf((*MockMeibunApp)(nil).RemoveMyHart), bookID, userID)
}

// Close mocks base method
func (m *MockMeibunApp) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockMeibunAppMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMeibunApp)(nil).Close))
}
