// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/kons16/meibun/api-server/model"
	reflect "reflect"
	time "time"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method
func (m *MockRepository) CreateNewUser(name, email, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", name, email, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewUser indicates an expected call of CreateNewUser
func (mr *MockRepositoryMockRecorder) CreateNewUser(name, email, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockRepository)(nil).CreateNewUser), name, email, passwordHash)
}

// FindUserByEmail mocks base method
func (m *MockRepository) FindUserByEmail(email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail
func (mr *MockRepositoryMockRecorder) FindUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockRepository)(nil).FindUserByEmail), email)
}

// CreateNewToken mocks base method
func (m *MockRepository) CreateNewToken(userID uint, token string, expiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewToken", userID, token, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewToken indicates an expected call of CreateNewToken
func (mr *MockRepositoryMockRecorder) CreateNewToken(userID, token, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewToken", reflect.TypeOf((*MockRepository)(nil).CreateNewToken), userID, token, expiresAt)
}

// FindUserByToken mocks base method
func (m *MockRepository) FindUserByToken(token string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByToken", token)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByToken indicates an expected call of FindUserByToken
func (mr *MockRepositoryMockRecorder) FindUserByToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByToken", reflect.TypeOf((*MockRepository)(nil).FindUserByToken), token)
}

// FindPasswordHashByEmail mocks base method
func (m *MockRepository) FindPasswordHashByEmail(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPasswordHashByEmail", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPasswordHashByEmail indicates an expected call of FindPasswordHashByEmail
func (mr *MockRepositoryMockRecorder) FindPasswordHashByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPasswordHashByEmail", reflect.TypeOf((*MockRepository)(nil).FindPasswordHashByEmail), email)
}

// DeleteUserSessionByToken mocks base method
func (m *MockRepository) DeleteUserSessionByToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSessionByToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSessionByToken indicates an expected call of DeleteUserSessionByToken
func (mr *MockRepositoryMockRecorder) DeleteUserSessionByToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSessionByToken", reflect.TypeOf((*MockRepository)(nil).DeleteUserSessionByToken), token)
}

// CreateNewBook mocks base method
func (m *MockRepository) CreateNewBook(sentence, title, author string, pages int, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewBook", sentence, title, author, pages, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewBook indicates an expected call of CreateNewBook
func (mr *MockRepositoryMockRecorder) CreateNewBook(sentence, title, author, pages, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewBook", reflect.TypeOf((*MockRepository)(nil).CreateNewBook), sentence, title, author, pages, userId)
}

// DeleteBookByBookID mocks base method
func (m *MockRepository) DeleteBookByBookID(bookID, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookByBookID", bookID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookByBookID indicates an expected call of DeleteBookByBookID
func (mr *MockRepositoryMockRecorder) DeleteBookByBookID(bookID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookByBookID", reflect.TypeOf((*MockRepository)(nil).DeleteBookByBookID), bookID, userID)
}

// UpdateBook mocks base method
func (m *MockRepository) UpdateBook(updateData *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook
func (mr *MockRepositoryMockRecorder) UpdateBook(updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockRepository)(nil).UpdateBook), updateData)
}

// GetAllBooksByUserID mocks base method
func (m *MockRepository) GetAllBooksByUserID(userID uint) (*[]model.FrontBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooksByUserID", userID)
	ret0, _ := ret[0].(*[]model.FrontBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooksByUserID indicates an expected call of GetAllBooksByUserID
func (mr *MockRepositoryMockRecorder) GetAllBooksByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooksByUserID", reflect.TypeOf((*MockRepository)(nil).GetAllBooksByUserID), userID)
}

// MakeHart mocks base method
func (m *MockRepository) MakeHart(bookID, userID uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeHart", bookID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeHart indicates an expected call of MakeHart
func (mr *MockRepositoryMockRecorder) MakeHart(bookID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeHart", reflect.TypeOf((*MockRepository)(nil).MakeHart), bookID, userID)
}

// GetMyHart mocks base method
func (m *MockRepository) GetMyHart(userID uint) (*[]model.FrontBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyHart", userID)
	ret0, _ := ret[0].(*[]model.FrontBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyHart indicates an expected call of GetMyHart
func (mr *MockRepositoryMockRecorder) GetMyHart(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyHart", reflect.TypeOf((*MockRepository)(nil).GetMyHart), userID)
}

// RemoveMyHart mocks base method
func (m *MockRepository) RemoveMyHart(bookID, userID uint) (*[]model.FrontBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMyHart", bookID, userID)
	ret0, _ := ret[0].(*[]model.FrontBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMyHart indicates an expected call of RemoveMyHart
func (mr *MockRepositoryMockRecorder) RemoveMyHart(bookID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMyHart", reflect.TypeOf((*MockRepository)(nil).RemoveMyHart), bookID, userID)
}

// Close mocks base method
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}
